searchState.loadedDescShard("nenya", 0, "Distributed Rate Limiting System\nSliding window rate limiter with an integrated PID …\nBuilder for creating a <code>RateLimiter</code> instance.\nReturns the current accepted request rate.\nBuilds and returns the <code>RateLimiter</code> instance.\nSets the external accepted request rate.\nReturns the current external accepted request rate.\nSets the external request rate.\nReturns the current external request rate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum allowable rate of requests.\nSets the minimum allowable rate of requests.\nCreates a new <code>RateLimiterBuilder</code> with default values.\nCreates a new <code>RateLimiter</code> instance.\nSets the PID controller for the rate limiter.\nReturns the current request rate.\nSets the external accepted request rate.\nSets the external request rate.\nReturns the current setpoint of the PID controller.\nDetermines if the current request should be throttled …\nReturns the current target rate of the rate limiter.\nSets the update interval for the PID controller.\nBuilder for creating a <code>PIDController</code> instance.\nReturns the accumulated error of the PID controller.\nBuilds and returns the <code>PIDController</code> instance.\nComputes the correction based on the current error.\nSets the error bias.\nSets the error limit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the derivative gain (<code>kd</code>).\nSets the integral gain (<code>ki</code>).\nSets the proportional gain (<code>kp</code>).\nCreates a new <code>PIDControllerBuilder</code> with default values.\nCreates a new <code>PIDController</code>.\nCreates a new static <code>PIDController</code> with zero gains.\nSets the output limit.\nReturns the setpoint of the PID controller.")