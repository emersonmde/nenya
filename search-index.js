var searchIndex = new Map(JSON.parse('[\
["nenya",{"doc":"","t":"FNNNNNNNNNCNNNNNNNNNFNNNNNNNNNNNN","n":["RateLimiter","accepted_request_rate","borrow","borrow_mut","external_accepted_request_rate","external_request_rate","fmt","from","into","new","pid_controller","request_rate","set_external_accepted_request_rate","set_external_request_rate","setpoint","should_throttle","target_rate","try_from","try_into","type_id","PIDController","accumulated_error","borrow","borrow_mut","compute_correction","fmt","from","into","new","setpoint","try_from","try_into","type_id"],"q":[[0,"nenya"],[20,"nenya::pid_controller"],[33,"num_traits::sign"],[34,"core::cmp"],[35,"num_traits::identities"],[36,"core::marker"],[37,"num_traits::cast"],[38,"core::fmt"],[39,"core::fmt"],[40,"core::convert"],[41,"core::result"],[42,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,10,10,10,10,10,10,10,10,10,10,10,10],"f":"`{{{b{c}}}c{dfhjl}}{ce{}{}}011{{{b{c}}n}A`Ab}{cc{}}2{{ccc{Ad{c}}Af}{{b{c}}}{dfhjl}}`4{{{b{c}}e}Ah{dfhjl}{{Aj{c}}}}05{{{b{c}}}Al{dfhjl}}6{c{{An{e}}}{}{}}0{cB`{}}`{{{Ad{c}}}c{dfj}}88{{{Ad{c}}e}c{dfj}{{Aj{c}}}}{{{Ad{c}}n}A`Ab}8:{{ccccccc}{{Ad{c}}}{dfj}}3554","c":[],"p":[[5,"RateLimiter",0],[10,"Signed",33],[10,"PartialOrd",34],[10,"Zero",35],[10,"Copy",36],[10,"FromPrimitive",37],[5,"Formatter",38],[8,"Result",38],[10,"Debug",38],[5,"PIDController",20],[5,"Duration",39],[1,"unit"],[10,"Into",40],[1,"bool"],[6,"Result",41],[5,"TypeId",42]],"b":[]}],\
["nenya_sentinel",{"doc":"","t":"IIFOONNNNNNONNHNOOOOCNNNNNFFFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOOCCOONNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNONNNNNNNNNNNNNNKFFNONNNNNNNNNNMNNNNNNNONNNNNNONONNNNOMNNNNNNNNNNN","n":["LockedMetricMap","MetricMap","SentinelService","alloc","base","borrow","borrow_mut","default","exchange_metrics","fmt","from","hostname","into","into_request","main","new","node_metrics","phantom","ptr","segments","sentinel","should_throttle","try_from","try_into","type_id","vzip","MetricData","Metrics","ShouldThrottleRequest","ShouldThrottleResponse","accepted_request_rate","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into_request","into_request","into_request","into_request","request_rate","segment","segment","segments","sentinel_client","sentinel_server","should_throttle","source","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","SentinelClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","exchange_metrics","fmt","from","from_ref","inner","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","should_throttle","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","Sentinel","SentinelServer","_Inner","accept_compressed","accept_compression_encodings","borrow","borrow","borrow_mut","borrow_mut","call","call","clone","clone","clone_into","clone_into","exchange_metrics","fmt","fmt","from","from","from_arc","from_ref","from_ref","inner","into","into","into_make_service","into_request","into_request","max_decoding_message_size","max_decoding_message_size","max_encoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","send_compression_encodings","should_throttle","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_interceptor"],"q":[[0,"nenya_sentinel"],[26,"nenya_sentinel::sentinel"],[111,"nenya_sentinel::sentinel::sentinel_client"],[137,"nenya_sentinel::sentinel::sentinel_server"],[187,"tonic::request"],[188,"core::future::future"],[189,"alloc::boxed"],[190,"core::pin"],[191,"core::fmt"],[192,"core::fmt"],[193,"core::result"],[194,"alloc::string"],[195,"core::any"],[196,"tonic::codec::compression"],[197,"tonic::body"],[198,"tonic::client::service"],[199,"core::clone"],[200,"tonic::transport::channel"],[201,"tonic::transport::error"],[202,"tonic::transport::channel::endpoint"],[203,"core::convert"],[204,"tonic::response"],[205,"tonic::status"],[206,"tonic::request"],[207,"http::request"],[208,"http::response"],[209,"tower_service"],[210,"tonic::service::interceptor"],[211,"http_body"],[212,"core::marker"],[213,"alloc::sync"],[214,"axum::routing::into_make_service"],[215,"core::task::wake"],[216,"core::task::poll"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns the value of <code>segment</code>, or the default value if …","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","","Generated trait containing gRPC methods that should be …","","","Enable decompressing requests with the given encoding.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Limits the maximum size of a decoded message.","","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","",""],"i":[0,0,0,49,50,1,1,1,1,1,1,1,1,1,0,1,1,49,49,1,0,1,1,1,1,1,0,0,0,0,15,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,15,13,13,2,0,0,16,2,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,2,15,13,16,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,40,40,44,40,44,40,40,40,44,40,44,40,41,44,40,44,40,40,44,40,40,44,40,40,44,40,40,40,40,40,40,40,40,40,40,41,44,40,44,40,44,40,44,40,44,40,40],"f":"`````{ce{}{}}0{{}b}{{b{f{d}}}{{l{{j{h}}}}}}{{bn}A`}{cc{}}`4{c{{f{e}}}{}{}}{{}{{Af{Ab{j{Ad}}}}}}{Ahb}`````{{b{f{Aj}}}{{l{{j{h}}}}}}{c{{Af{e}}}{}{}}0{cAl{}}:`````::::::::{dAb}{AnAb}{AjAb}{B`Ab}{dd}{AnAn}{AjAj}{B`B`}{{ce}Ab{}{}}000{{}d}{{}An}{{}Aj}{{}B`}{dBb}{AnBb}{AjBb}{B`Bb}{{dd}Bd}{{AnAn}Bd}{{AjAj}Bd}{{B`B`}Bd}{{dn}A`}{{Ann}A`}{{Ajn}A`}{{B`n}A`}{cc{}}0000000{ce{}{}}000{c{{f{e}}}{}{}}000`{AjBf}``````2222{c{{Af{e}}}{}{}}0000000{cAl{}}0004444`{{{Bh{c}}Bj}{{Bh{c}}}{{Bn{Bl}}}}55{{{Bh{c}}}{{Bh{c}}}C`}{{ce}Ab{}{}}{c{{Af{{Bh{Cb}}Cd}}}{{Ch{Cf}}}}{{{Bh{c}}e}{{Af{{Cj{d}}Cl}}}{{Bn{Bl}}}{{Cn{d}}}}{{{Bh{c}}n}A`D`};;`:9{{{Bh{c}}Bb}{{Bh{c}}}{{Bn{Bl}}}}0{c{{Bh{c}}}{{Bn{Bl}}}}7{{{Bh{c}}e}{{Af{{Cj{B`}}Cl}}}{{Bn{Bl}}}{{Cn{Aj}}}}=::9={{ce}{{Bh{{Db{ce}}}}}{{Dj{{Dd{Bl}}}{{Df{Dh}}}}{Bn{Bl}}}Dl}{{cDn}{{Bh{c}}}{{Bn{Bl}}}}```{{{E`{c}}Bj}{{E`{c}}}Eb}`{ce{}{}}000{{c{Dd{e}}}{}{}{}}{{{E`{c}}{Dd{e}}}gEb{EdEf}{}}{{{Eh{c}}}{{Eh{c}}}Eb}{{{E`{c}}}{{E`{c}}}Eb}>>{{Eb{f{d}}}{{l{{j{h}}}}}}{{{Eh{c}}n}A`D`}{{{E`{c}}n}A`{D`Eb}}{cc{}}0{{{Ej{c}}}{{E`{c}}}Eb}11`99{c{{El{e}}}{}{}}{c{{f{e}}}{}{}}0{{{E`{c}}Bb}{{E`{c}}}Eb}`0`{c{{E`{c}}}Eb}{{cEn}{{F`{{Af{Ab}}}}}{}}{{{E`{c}}En}{{F`{{Af{Abe}}}}}Eb{}}{{{E`{c}}Bj}{{E`{c}}}Eb}`{{Eb{f{Aj}}}{{l{{j{h}}}}}}{ce{}{}}0{c{{Af{e}}}{}{}}000{cAl{}}022{{ce}{{Db{{E`{c}}e}}}EbDl}","c":[],"p":[[5,"SentinelService",0],[5,"Metrics",26],[5,"Request",187],[10,"Future",188],[5,"Box",189],[5,"Pin",190],[5,"Formatter",191],[8,"Result",191],[1,"unit"],[10,"Error",192],[6,"Result",193],[5,"String",194],[5,"ShouldThrottleRequest",26],[5,"TypeId",195],[5,"MetricData",26],[5,"ShouldThrottleResponse",26],[1,"usize"],[1,"bool"],[1,"str"],[5,"SentinelClient",111],[6,"CompressionEncoding",196],[8,"BoxBody",197],[10,"GrpcService",198],[10,"Clone",199],[5,"Channel",200],[5,"Error",201],[5,"Endpoint",202],[10,"TryInto",203],[5,"Response",204],[5,"Status",205],[10,"IntoRequest",187],[10,"Debug",191],[5,"InterceptedService",206],[5,"Request",207],[17,"Response"],[5,"Response",208],[10,"Service",209],[10,"Interceptor",206],[5,"Uri",210],[5,"SentinelServer",137],[10,"Sentinel",137],[10,"Body",211],[10,"Send",212],[5,"_Inner",137],[5,"Arc",213],[5,"IntoMakeService",214],[5,"Context",215],[6,"Poll",216],[8,"LockedMetricMap",0],[8,"MetricMap",0]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
